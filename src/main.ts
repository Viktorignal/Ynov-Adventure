/// <reference types="@workadventure/iframe-api-typings" />

/* ================== CONFIG ================== */
const MAP_URL = "/@/ynov-1733302243/ynov_adventure/new-map";
const ZONES: { id: string; label: string }[] = [
  { id: "#TPA-IA",     label: "IA" },
  { id: "#TPAINFO",    label: "Informatique" },
  { id: "#TPACYBER",   label: "Cybers√©curit√©" },
  { id: "#TPAARCHI",   label: "Architecture" },
  { id: "#TPABIM",     label: "B√¢timent Num√©rique" },
  { id: "#TPAAUDIO",   label: "Audiovisuel" },
  { id: "#TPADIGITAL", label: "DIGITAL IA" },
  { id: "#TPA3D",      label: "3D" },
  { id: "#TPAHUB",     label: "Accueil" },
];

/* ===== Helpers ‚Äúcompat‚Äù ===== */
function addActionButtonCompat(opts: {
  id: string;
  label: string;
  onClick: () => void;
  bgColor?: string;
  isGradient?: boolean;
  hoverColor?: string;
}) {
  const cfg: any = {
    id: opts.id,
    label: opts.label,
    callback: opts.onClick,
    clickCallback: opts.onClick, // selon version
  };
  // Styles (si support√©s par l‚Äôinstance, ils s‚Äôappliqueront ; sinon, ignor√©s)
  if (opts.bgColor) cfg.bgColor = opts.bgColor;
  if (opts.isGradient !== undefined) cfg.isGradient = opts.isGradient;
  if (opts.hoverColor) cfg.hoverColor = opts.hoverColor;

  (WA.ui as any).actionBar.addButton(cfg);
}
function removeActionButton(id: string) {
  const ab: any = WA.ui.actionBar;
  try { ab.removeButton?.(id); } catch {}
}

/* ===== T√©l√©portation : √©tat ===== */
const MAIN_TP_BTN_ID = "teleport-btn";
let tpOpen = false;
let tpPage = 0;
let tpButtonIds: string[] = [];
const IS_MOBILE =
  /Mobi|Android/i.test(navigator.userAgent) ||
  (window.matchMedia && window.matchMedia("(pointer:coarse)").matches) ||
  (typeof window !== "undefined" && window.innerWidth < 768);
// Desktop = 3/page, Mobile = 1/page (si fallback action bar)
const PER_PAGE = IS_MOBILE ? 1 : 3;

WA.onInit().then(() => {
  // üü° Candidater ‚Äî couleur + gradient si support√©s (sinon style normal)
  addActionButtonCompat({
    id: "candidater-btn",
    label: "Candidater",
    bgColor: "#edb911",
    isGradient: true,
    onClick: () => {
      try {
        // @ts-ignore (selon version)
        if (WA?.nav?.openTab) WA.nav.openTab("https://www.ynov.com/candidature");
        else window.open("https://www.ynov.com/candidature", "_blank", "noopener,noreferrer");
      } catch {
        window.open("https://www.ynov.com/candidature", "_blank", "noopener,noreferrer");
      }
    },
  });

  // üß≠ T√©l√©portation (le bouton dispara√Æt pendant que la liste est ouverte)
  addActionButtonCompat({
    id: MAIN_TP_BTN_ID,
    label: "T√©l√©portation",
    bgColor: "#2ea7ff",
    isGradient: true,
    onClick: () => openTeleportUI(),
  });
}).catch((e) => console.error("[WA] onInit error:", e));

/* === UI T√©l√©portation === */
function openTeleportUI() {
  if (tpOpen) return;
  tpOpen = true;

  // retire le bouton principal pendant l'ouverture de la liste
  removeActionButton(MAIN_TP_BTN_ID);

  // 1) Tenter une POPUP ANCR√âE (si un objet 'tp_anchor' existe dans la map)
  //    -> Meilleur rendu mobile (vertical, natif)
  try {
    openTeleportPopupAnchored("tp_anchor");
    return;
  } catch {
    // 2) Sinon, fallback : sous-menu pagin√© dans l‚Äôaction bar
    openTeleportActionBarFallback();
  }
}

function closeTeleportUI() {
  tpOpen = false;
  // nettoie les sous-boutons du fallback si besoin
  removeTpButtons();
  // r√©tablit le bouton principal
  addActionButtonCompat({
    id: MAIN_TP_BTN_ID,
    label: "T√©l√©portation",
    bgColor: "#2ea7ff",
    isGradient: true,
    onClick: () => openTeleportUI(),
  });
}

/* ---- Variante pr√©f√©r√©e : POPUP ancr√©e √† un objet de la map ---- */
function openTeleportPopupAnchored(anchorObjectName: string) {
  // On g√©n√®re les boutons (liste verticale native)
  const buttons = ZONES.map((z) => ({
    label: z.label,
    callback: () => {
      WA.nav.goToRoom(MAP_URL + z.id);
      try { anchoredPopup?.close?.(); } catch {}
      closeTeleportUI();
    },
  }));
  buttons.push({
    label: "Fermer",
    callback: () => {
      try { anchoredPopup?.close?.(); } catch {}
      closeTeleportUI();
    },
  });

  // IMPORTANT : l‚Äôid doit exister dans la map (Object Layer ‚Üí rectangle nomm√© 'tp_anchor')
  let anchoredPopup: any;
  anchoredPopup = WA.ui.openPopup(
    anchorObjectName,
    "T√©l√©portation\n\nChoisissez une destination :",
    buttons
  );
}

/* ---- Fallback : sous-menu pagin√© dans l‚Äôaction bar ---- */
function openTeleportActionBarFallback() {
  tpPage = 0;
  drawTpButtons();
}

function drawTpButtons() {
  removeTpButtons();

  const totalPages = Math.max(1, Math.ceil(ZONES.length / PER_PAGE));
  tpPage = Math.max(0, Math.min(tpPage, totalPages - 1));

  const start = tpPage * PER_PAGE;
  const slice = ZONES.slice(start, start + PER_PAGE);

  // ‚óÄ
  if (tpPage > 0) {
    addTpBtn("tp-prev", "‚óÄ Pr√©c√©dent", () => { tpPage -= 1; drawTpButtons(); });
  }

  // zones
  slice.forEach((z, i) => {
    addTpBtn(`tp-z-${start + i}`, z.label, () => {
      WA.nav.goToRoom(MAP_URL + z.id);
      // refermer apr√®s TP (si tu veux laisser ouvert, remplace par drawTpButtons();)
      closeTeleportUI();
    });
  });

  // ‚ñ∂
  if (tpPage < totalPages - 1) {
    addTpBtn("tp-next", "Suivant ‚ñ∂", () => { tpPage += 1; drawTpButtons(); });
  }

  // ‚úñ
  addTpBtn("tp-close", "‚úñ Fermer", () => closeTeleportUI());
}

function addTpBtn(id: string, label: string, cb: () => void) {
  tpButtonIds.push(id);
  (WA.ui as any).actionBar.addButton({
    id,
    label,
    callback: cb,
    clickCallback: cb,
  });
}
function removeTpButtons() {
  const ab: any = WA.ui.actionBar;
  tpButtonIds.forEach((id) => { try { ab.removeButton?.(id); } catch {} });
  tpButtonIds = [];
}

export {};
